# -*- coding: utf-8 -*-
"""
This calss contains the AFGL Atmospheric Constituent Profiles (0-120km).
"""

from typing import Tuple, Dict
import numpy as np


class AtmosphericProfiles:
    """AFGL Atmospheric Constituent Profiles (0-120km)

    Each of these profile contains data at 50 atmospheric levels.
    Altitude (km), Pressure (mb), Density (cm-3), Molec. densities (ppmv):
    
    * 0 (H2O),
    * 1 (CO2),
    * 2 (O3),
    * 3 (N2O),
    * 4 (CO),
    * 5 (CH4),
    * 6 (O2)
    
    Plus suplimental profiles where available.
    The last set of data sets are constituent profiles of molecular
    densities (ppmv) for the minor absorbing atmospheric gases:
    
    * 7 (NO),
    * 8 (SO4),
    * 9 (NO2),
    * 10 (NH3),
    * 11 (HNO3),
    * 12 (OH),
    * 13 (HF),
    * 14 (HCl),
    * 15 (HBr),
    * 16 (HI),
    * 17 (ClO),
    * 18 (OCS),
    * 19 (H2CO),
    * 20 (HOCl),
    * 21 (N2),
    * 22 (HCN),
    * 23 (CH3Cl),
    * 24 (H2O2),
    * 25 (C2H2),
    * 26 C2H6),
    * 27 (PH3),
    * 28 (COF2),
    * 29 (SF6),
    * 30 (H2S),
    * 31 (HCOOH)

    References
    ----------

    .. [1] [ANDERSON]_
    
    Examples:
        >>> from pyrtlib.atmospheric_profiles import AtmosphericProfiles as atmp
        >>> atmp.atm_profiles()
        {0: 'Tropical',
         1: 'Midlatitude Summer',
         2: 'Midlatitude Winter',
         3: 'Subarctic Summer',
         4: 'Subarctic Winter',
         5: 'US Standard'}
        >>> atmp.TROPICAL, atmp.H2O
        (0, 0)
    """

    TROPICAL = 0
    MIDLATITUDE_SUMMER = 1
    MIDLATITUDE_WINTER = 2
    SUBARCTIC_SUMMER = 3
    SUBARCTIC_WINTER = 4
    US_STANDARD = 5

    H2O = 0
    CO2 = 1
    O3 = 2
    N2O = 3
    CO = 4
    CH4 = 5
    O2 = 6
    NO = 7
    SO2 = 8
    NO2 = 9
    NH3 = 10
    HNO3 = 11
    OH = 12
    HF = 13
    HCL = 14
    HBR = 15
    HI = 16
    CLO = 17
    OCS = 18
    H2CO = 19
    HOCL = 20
    N2 = 21
    HCN = 22
    CH3CL = 23
    H2O2 = 24
    C2H2 = 25
    C2H6 = 26
    PH3 = 27
    COF2 = 28
    SF6 = 29
    H2S = 30
    HCOOH = 31
    AIR = 99

    @staticmethod
    def atm_profiles() -> Dict[int, str]:
        """Convenient function to ger the list of the buolt-in  Atmospheric profiles.

        Returns:
            Dict[int, str]: A dictionary of standard profiles atmospheric.
        """
        return {AtmosphericProfiles.TROPICAL: 'Tropical',
                AtmosphericProfiles.MIDLATITUDE_SUMMER: 'Midlatitude Summer',
                AtmosphericProfiles.MIDLATITUDE_WINTER: 'Midlatitude Winter',
                AtmosphericProfiles.SUBARCTIC_SUMMER: 'Subarctic Summer',
                AtmosphericProfiles.SUBARCTIC_WINTER: 'Subarctic Winter',
                AtmosphericProfiles.US_STANDARD: 'US Standard'}


    @staticmethod
    def gl_atm(atm: int) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray]:
        """Returns the Atmopshere profile.
        
        This method contains 6 model profiles:
        
        +--------+---------------------+
        | option | model               |
        +--------+---------------------+
        | 1      |  Tropical           |
        +--------+---------------------+
        | 2      |  Midlatitude Summer |
        +--------+---------------------+
        | 3      |  Midlatitude Winter |
        +--------+---------------------+
        | 4      |  Subarctic Summer   |
        +--------+---------------------+
        | 5      |  Subarctic Winter   |
        +--------+---------------------+
        | 6      |  U.S. Standard      |
        +--------+---------------------+

        Args:
            option (int): the atmosphere profile.

        Returns:
            Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]: 
            * a (numpy.ndarray): Altitudes (km) (50x1)
            * p (numpy.ndarray): Pressure (mbar)
            * d (numpy.ndarray): Total density (cm-3)
            * t (numpy.ndarray): Temperature (K)
            * md (numpy.ndarray): Molecular densities (ppmv)

        .. note:: adapted from glatm.dat.  DCT 3/26/97
        """
        option = atm + 1
        # MODEL 1.  TROPICAL
        if option == 1:
            #
            # Latitude (deg)
            # 15.0
            #
            # Altitude (km)
            a = np.asarray([
                0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,
                22.0, 23.0, 24.0, 25.0, 27.5, 30.0, 32.5, 35.0, 37.5, 40.0,
                42.5, 45.0, 47.5, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0,
                85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0
            ])

            # Pressue (mb)
            p = np.asarray([
                1013.0, 904.0, 805.0, 715.0, 633.0, 559.0, 492.0, 432.0, 378.0,
                329.0, 286.0, 247.0, 213.0, 182.0, 156.0, 132.0, 111.0, 93.7,
                78.9, 66.6, 56.5, 48.0, 40.9, 35.0, 30.0, 25.7, 17.63, 12.2,
                8.52, 6.0, 4.26, 3.05, 2.2, 1.59, 1.16, 0.854, 0.456, 0.239,
                0.121, 0.058, 0.026, 0.011, 0.0044, 0.00172, 0.000688,
                0.000289, 0.00013, 6.47e-05, 3.6e-05, 2.25e-05
            ])

            # Temperature (K)
            t = np.asarray([
                299.7, 293.7, 287.7, 283.7, 277.0, 270.3, 263.6, 257.0, 250.3,
                243.6, 237.0, 230.1, 223.6, 217.0, 210.3, 203.7, 197.0, 194.8,
                198.8, 202.7, 206.7, 210.7, 214.6, 217.0, 219.2, 221.4, 227.0,
                232.3, 237.7, 243.1, 248.5, 254.0, 259.4, 264.8, 269.6, 270.2,
                263.4, 253.1, 236.0, 218.9, 201.8, 184.8, 177.1, 177.0, 184.3,
                190.7, 212.0, 241.6, 299.7, 380.0
            ])

            # Density (cm-3)
            d = np.asarray([
                2.45e+19, 2.231e+19, 2.028e+19, 1.827e+19, 1.656e+19,
                1.499e+19, 1.353e+19, 1.218e+19, 1.095e+19, 9.789e+18,
                8.747e+18, 7.78e+18, 6.904e+18, 6.079e+18, 5.377e+18,
                4.697e+18, 4.084e+18, 3.486e+18, 2.877e+18, 2.381e+18,
                1.981e+18, 1.651e+18, 1.381e+18, 1.169e+18, 9.92e+17,
                8.413e+17, 5.629e+17, 3.807e+17, 2.598e+17, 1.789e+17,
                1.243e+17, 8.703e+16, 6.147e+16, 4.352e+16, 3.119e+16,
                2.291e+16, 1.255e+16, 6.844e+15, 3.716e+15, 1.92e+15,
                9.338e+14, 4.314e+14, 1.801e+14, 7.043e+13, 2.706e+13,
                1.098e+13, 4.445e+12, 1.941e+12, 8.706e+11, 4.225e+11
            ])

            # 1 :H2O (ppmv)
            g1 = np.asarray([
                25930.0, 19490.0, 15340.0, 8600.0, 4441.0, 3346.0, 2101.0,
                1289.0, 763.7, 409.8, 191.2, 73.06, 29.05, 9.9, 6.22, 4.0, 3.0,
                2.9, 2.75, 2.6, 2.6, 2.65, 2.8, 2.9, 3.2, 3.25, 3.6, 4.0, 4.3,
                4.6, 4.9, 5.2, 5.5, 5.7, 5.9, 6.0, 6.0, 6.0, 5.4, 4.5, 3.3,
                2.1, 1.3, 0.85, 0.54, 0.4, 0.34, 0.28, 0.24, 0.2
            ])

            # 2 :CO2 (ppmv)
            g2 = np.asarray([
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 328.0, 320.0, 310.0, 270.0,
                195.0, 110.0, 60.0, 40.0, 35.0
            ])

            # 3 :O3 (ppmv)
            g3 = np.asarray([
                0.02869, 0.0315, 0.03342, 0.03504, 0.03561, 0.03767, 0.03989,
                0.04223, 0.04471, 0.05, 0.05595, 0.06613, 0.07815, 0.09289,
                0.105, 0.1256, 0.1444, 0.25, 0.5, 0.95, 1.4, 1.8, 2.4, 3.4,
                4.3, 5.4, 7.8, 9.3, 9.85, 9.7, 8.8, 7.5, 5.9, 4.5, 3.45, 2.8,
                1.8, 1.1, 0.65, 0.3, 0.18, 0.33, 0.5, 0.52, 0.5, 0.4, 0.2,
                0.05, 0.005, 0.0005
            ])

            # 4 : N2O (ppmv)
            g4 = np.asarray([
                0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3195,
                0.3179, 0.314, 0.3095, 0.3048, 0.2999, 0.2944, 0.2877, 0.2783,
                0.2671, 0.2527, 0.2365, 0.2194, 0.2051, 0.1967, 0.1875, 0.1756,
                0.1588, 0.1416, 0.1165, 0.09275, 0.06693, 0.04513, 0.02751,
                0.01591, 0.009378, 0.004752, 0.003, 0.002065, 0.001507,
                0.001149, 0.000889, 0.0007056, 0.0005716, 0.0004708, 0.0003932,
                0.0003323, 0.0002837, 0.0002443, 0.000212, 0.0001851
            ])

            # 5 :CO (ppmv)
            g5 = np.asarray([
                0.15, 0.145, 0.1399, 0.1349, 0.1312, 0.1303, 0.1288, 0.1247,
                0.1185, 0.1094, 0.09962, 0.08964, 0.07814, 0.06374, 0.05025,
                0.03941, 0.03069, 0.02489, 0.01966, 0.01549, 0.01331, 0.01232,
                0.01232, 0.01307, 0.014, 0.01521, 0.01722, 0.01995, 0.02266,
                0.02487, 0.02738, 0.03098, 0.0351, 0.03987, 0.04482, 0.05092,
                0.05985, 0.0696, 0.09188, 0.1938, 0.5688, 1.549, 3.849, 6.59,
                10.44, 17.05, 24.71, 33.58, 41.48, 50.0
            ])

            # 6 :CH4 (ppmv)
            g6 = np.asarray([
                1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.699, 1.697, 1.693, 1.685,
                1.675, 1.662, 1.645, 1.626, 1.605, 1.582, 1.553, 1.521, 1.48,
                1.424, 1.355, 1.272, 1.191, 1.118, 1.055, 0.987, 0.9136, 0.83,
                0.746, 0.6618, 0.5638, 0.4614, 0.3631, 0.2773, 0.21, 0.1651,
                0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.14, 0.13, 0.12, 0.11,
                0.095, 0.06, 0.03
            ])

            # 7 :O2 (ppmv)
            g7 = np.asarray([
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                200000.0, 190000.0, 180000.0, 160000.0, 140000.0, 120000.0,
                94000.0, 72500.0
            ])

        # MODEL 2. MIDLATITUDE SUMMER
        elif option == 2:
            #
            # Latitude (deg)
            # 45.0
            # Altitude (km)
            a = np.asarray([
                0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,
                22.0, 23.0, 24.0, 25.0, 27.5, 30.0, 32.5, 35.0, 37.5, 40.0,
                42.5, 45.0, 47.5, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0,
                85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0
            ])

            # Pressure (mb)
            p = np.asarray([
                1013.0, 902.0, 802.0, 710.0, 628.0, 554.0, 487.0, 426.0, 372.0,
                324.0, 281.0, 243.0, 209.0, 179.0, 153.0, 130.0, 111.0, 95.0,
                81.2, 69.5, 59.5, 51.0, 43.7, 37.6, 32.2, 27.7, 19.07, 13.2,
                9.3, 6.52, 4.64, 3.33, 2.41, 1.76, 1.29, 0.951, 0.515, 0.272,
                0.139, 0.067, 0.03, 0.012, 0.00448, 0.00164, 0.000625,
                0.000258, 0.000117, 6.11e-05, 3.56e-05, 2.27e-05
            ])

            # Temperature (k)
            t = np.asarray([
                294.2, 289.7, 285.2, 279.2, 273.2, 267.2, 261.2, 254.7, 248.2,
                241.7, 235.3, 228.8, 222.3, 215.8, 215.7, 215.7, 215.7, 215.7,
                216.8, 217.9, 219.2, 220.4, 221.6, 222.8, 223.9, 225.1, 228.45,
                233.7, 239.0, 245.2, 251.3, 257.5, 263.7, 269.9, 275.2, 275.7,
                269.3, 257.1, 240.1, 218.1, 196.1, 174.1, 165.1, 165.0, 178.3,
                190.5, 222.2, 262.4, 316.8, 380.0
            ])

            # Density (cm-3)
            d = np.asarray([
                2.496e+19, 2.257e+19, 2.038e+19, 1.843e+19, 1.666e+19,
                1.503e+19, 1.351e+19, 1.212e+19, 1.086e+19, 9.716e+18,
                8.656e+18, 7.698e+18, 6.814e+18, 6.012e+18, 5.141e+18,
                4.368e+18, 3.73e+18, 3.192e+18, 2.715e+18, 2.312e+18,
                1.967e+18, 1.677e+18, 1.429e+18, 1.223e+18, 1.042e+18,
                8.919e+17, 6.05e+17, 4.094e+17, 2.82e+17, 1.927e+17, 1.338e+17,
                9.373e+16, 6.624e+16, 4.726e+16, 3.398e+16, 2.5e+16, 1.386e+16,
                7.668e+15, 4.196e+15, 2.227e+15, 1.109e+15, 4.996e+14,
                1.967e+14, 7.204e+13, 2.541e+13, 9.816e+12, 3.816e+12,
                1.688e+12, 8.145e+11, 4.33e+11
            ])

            # 1 :H2O (ppmv)
            g1 = np.asarray([
                18760.0, 13780.0, 9680.0, 5984.0, 3813.0, 2225.0, 1510.0,
                1020.0, 646.4, 412.9, 247.2, 95.56, 29.44, 8.0, 5.0, 3.4, 3.3,
                3.2, 3.15, 3.2, 3.3, 3.45, 3.6, 3.85, 4.0, 4.2, 4.45, 4.7,
                4.85, 4.95, 5.0, 5.1, 5.3, 5.45, 5.5, 5.5, 5.35, 5.0, 4.4, 3.7,
                2.95, 2.1, 1.33, 0.85, 0.54, 0.4, 0.34, 0.28, 0.24, 0.2
            ])

            # 2 :CO2 (ppmv)
            g2 = np.asarray([
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 328.0, 320.0, 310.0, 270.0,
                195.0, 110.0, 60.0, 40.0, 35.0
            ])

            # 3 :O3 (ppmv)
            g3 = np.asarray([
                0.03017, 0.03337, 0.03694, 0.04222, 0.04821, 0.05512, 0.06408,
                0.07764, 0.09126, 0.1111, 0.1304, 0.1793, 0.223, 0.3, 0.44,
                0.5, 0.6, 0.7, 1.0, 1.5, 2.0, 2.4, 2.9, 3.4, 4.0, 4.8, 6.0,
                7.0, 8.1, 8.9, 8.7, 7.55, 5.9, 4.5, 3.5, 2.8, 1.8, 1.3, 0.8,
                0.4, 0.19, 0.2, 0.57, 0.75, 0.7, 0.4, 0.2, 0.05, 0.005, 0.0005
            ])

            # 4 :N2O (ppmv)
            g4 = np.asarray([
                0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3195, 0.3163,
                0.3096, 0.2989, 0.2936, 0.286, 0.28, 0.2724, 0.2611, 0.2421,
                0.2174, 0.1843, 0.1607, 0.1323, 0.1146, 0.1035, 0.09622,
                0.08958, 0.08006, 0.06698, 0.04958, 0.03695, 0.02519, 0.01736,
                0.01158, 0.007665, 0.005321, 0.003215, 0.00203, 0.001397,
                0.00102, 0.0007772, 0.0006257, 0.0005166, 0.0004352, 0.0003727,
                0.0003237, 0.0002844, 0.0002524, 0.000226, 0.0002039, 0.0001851
            ])

            # 5 :CO (ppmv)
            g5 = np.asarray([
                0.15, 0.145, 0.1399, 0.1349, 0.1312, 0.1303, 0.1288, 0.1247,
                0.1185, 0.1094, 0.09962, 0.08964, 0.07814, 0.06374, 0.05025,
                0.03941, 0.03069, 0.02489, 0.01966, 0.01549, 0.01331, 0.01232,
                0.01232, 0.01307, 0.014, 0.01521, 0.01722, 0.01995, 0.02266,
                0.02487, 0.02716, 0.02962, 0.03138, 0.03307, 0.03487, 0.03645,
                0.03923, 0.04673, 0.06404, 0.1177, 0.2935, 0.6815, 1.465,
                2.849, 5.166, 10.08, 18.65, 28.63, 38.9, 50.0
            ])

            # 6 :CH4 (ppmv)
            g6 = np.asarray([
                1.7, 1.7, 1.7, 1.7, 1.697, 1.687, 1.672, 1.649, 1.629, 1.615,
                1.579, 1.542, 1.508, 1.479, 1.451, 1.422, 1.39, 1.356, 1.323,
                1.281, 1.224, 1.154, 1.066, 0.973, 0.88, 0.7888, 0.7046,
                0.6315, 0.5592, 0.5008, 0.4453, 0.3916, 0.3389, 0.2873, 0.2384,
                0.1944, 0.1574, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.14, 0.13,
                0.12, 0.11, 0.095, 0.06, 0.03
            ])

            # 7 :O2 (ppmv)
            g7 = np.asarray([
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                200000.0, 190000.0, 180000.0, 160000.0, 140000.0, 120000.0,
                94000.0, 72500.0
            ])

        # MODEL 3. MIDLATITUDE WINTER
        elif option == 3:
            #
            # Latitude (deg)
            # 45.0
            # Altitude (km)
            a = np.asarray([
                0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,
                22.0, 23.0, 24.0, 25.0, 27.5, 30.0, 32.5, 35.0, 37.5, 40.0,
                42.5, 45.0, 47.5, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0,
                85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0
            ])

            # Pressure (mb)
            p = np.asarray([
                1018.0, 897.3, 789.7, 693.8, 608.1, 531.3, 462.7, 401.6, 347.3,
                299.3, 256.8, 219.9, 188.2, 161.1, 137.8, 117.8, 100.7, 86.1,
                73.6, 62.8, 53.7, 45.8, 39.1, 33.4, 28.6, 24.4, 16.46, 11.1,
                7.56, 5.18, 3.6, 2.53, 1.8, 1.29, 0.94, 0.683, 0.362, 0.188,
                0.095, 0.047, 0.0222, 0.0103, 0.00456, 0.00198, 0.000877,
                0.0004074, 0.0002, 0.0001057, 5.98e-05, 3.6e-05
            ])

            # Temperature (K)
            t = np.asarray([
                272.2, 268.7, 265.2, 261.7, 255.7, 249.7, 243.7, 237.7, 231.7,
                225.7, 219.7, 219.2, 218.7, 218.2, 217.7, 217.2, 216.7, 216.2,
                215.7, 215.2, 215.2, 215.2, 215.2, 215.2, 215.2, 215.2, 215.5,
                217.4, 220.4, 227.9, 235.5, 243.2, 250.8, 258.5, 265.1, 265.7,
                260.6, 250.8, 240.9, 230.7, 220.4, 210.1, 199.8, 199.5, 208.3,
                218.6, 237.1, 259.5, 293.0, 333.0
            ])

            # Density (cm-3)
            d = np.asarray([
                2.711e+19, 2.42e+19, 2.158e+19, 1.922e+19, 1.724e+19,
                1.542e+19, 1.376e+19, 1.225e+19, 1.086e+19, 9.612e+18,
                8.472e+18, 7.271e+18, 6.237e+18, 5.351e+18, 4.588e+18,
                3.931e+18, 3.368e+18, 2.886e+18, 2.473e+18, 2.115e+18,
                1.809e+18, 1.543e+18, 1.317e+18, 1.125e+18, 9.633e+17,
                8.218e+17, 5.536e+17, 3.701e+17, 2.486e+17, 1.647e+17,
                1.108e+17, 7.54e+16, 5.202e+16, 3.617e+16, 2.57e+16, 1.863e+16,
                1.007e+16, 5.433e+15, 2.858e+15, 1.477e+15, 7.301e+14,
                3.553e+14, 1.654e+14, 7.194e+13, 3.052e+13, 1.351e+13,
                6.114e+12, 2.952e+12, 1.479e+12, 7.836e+11
            ])

            # 1 :H2O (ppmv)
            g1 = np.asarray([
                4316.0, 3454.0, 2788.0, 2088.0, 1280.0, 824.1, 510.3, 232.1,
                107.7, 55.66, 29.6, 10.0, 6.0, 5.0, 4.8, 4.7, 4.6, 4.5, 4.5,
                4.5, 4.5, 4.5, 4.53, 4.55, 4.6, 4.65, 4.7, 4.75, 4.8, 4.85,
                4.9, 4.95, 5.0, 5.0, 5.0, 4.95, 4.85, 4.5, 4.0, 3.3, 2.7, 2.0,
                1.33, 0.85, 0.54, 0.4, 0.34, 0.28, 0.24, 0.2
            ])

            # 2 :CO2 (ppmv)
            g2 = np.asarray([
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 328.0, 320.0, 310.0, 270.0,
                195.0, 110.0, 60.0, 40.0, 35.0
            ])

            # 3 :O3 (ppmv)
            g3 = np.asarray([
                0.02778, 0.028, 0.02849, 0.032, 0.03567, 0.0472, 0.05837,
                0.07891, 0.1039, 0.1567, 0.237, 0.3624, 0.5232, 0.7036, 0.8,
                0.9, 1.1, 1.4, 1.8, 2.3, 2.9, 3.5, 3.9, 4.3, 4.7, 5.1, 5.6,
                6.1, 6.8, 7.1, 7.2, 6.9, 5.9, 4.6, 3.7, 2.75, 1.7, 1.0, 0.55,
                0.32, 0.25, 0.23, 0.55, 0.8, 0.8, 0.4, 0.2, 0.05, 0.005, 0.0005
            ])

            # 4 :N2O (ppmv)
            g4 = np.asarray([
                0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3195, 0.3163,
                0.3096, 0.2989, 0.2936, 0.286, 0.28, 0.2724, 0.2611, 0.2421,
                0.2174, 0.1843, 0.1621, 0.1362, 0.123, 0.1124, 0.1048, 0.09661,
                0.08693, 0.07524, 0.06126, 0.05116, 0.03968, 0.02995, 0.0208,
                0.01311, 0.008071, 0.004164, 0.002629, 0.001809, 0.001321,
                0.001007, 0.0007883, 0.0006333, 0.0005194, 0.0004333,
                0.0003666, 0.000314, 0.0002717, 0.0002373, 0.0002089, 0.0001851
            ])

            # 5 :CO (ppmv)
            g5 = np.asarray([
                0.15, 0.145, 0.1399, 0.1349, 0.1312, 0.1303, 0.1288, 0.1247,
                0.1185, 0.1094, 0.09962, 0.08964, 0.07814, 0.06374, 0.05025,
                0.03941, 0.03069, 0.02489, 0.01966, 0.01549, 0.01331, 0.01232,
                0.01232, 0.01307, 0.014, 0.01498, 0.01598, 0.0171, 0.0185,
                0.01997, 0.02147, 0.02331, 0.02622, 0.03057, 0.03803, 0.06245,
                0.148, 0.2926, 0.5586, 1.078, 1.897, 2.96, 4.526, 6.862, 10.54,
                17.09, 24.73, 33.59, 41.49, 50.0
            ])

            # 6 :CH4 (ppmv)
            g6 = np.asarray([
                1.7, 1.7, 1.7, 1.7, 1.697, 1.687, 1.672, 1.649, 1.629, 1.615,
                1.579, 1.542, 1.508, 1.479, 1.451, 1.422, 1.39, 1.356, 1.323,
                1.281, 1.224, 1.154, 1.066, 0.973, 0.88, 0.7931, 0.713, 0.6438,
                0.5746, 0.505, 0.4481, 0.3931, 0.3395, 0.2876, 0.2386, 0.1944,
                0.1574, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.14, 0.13, 0.12,
                0.11, 0.095, 0.06, 0.03
            ])

            # 7 :O2 (ppmv)
            g7 = np.asarray([
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                200000.0, 190000.0, 180000.0, 160000.0, 140000.0, 120000.0,
                94000.0, 72500.0
            ])

        # MODEL 4. SUBARCTIC SUMMER
        elif option == 4:
            #
            # Latitude (deg)
            # 60.0
            #
            # Altitude (km)
            a = np.asarray([
                0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,
                22.0, 23.0, 24.0, 25.0, 27.5, 30.0, 32.5, 35.0, 37.5, 40.0,
                42.5, 45.0, 47.5, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0,
                85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0
            ])

            # Pressure (mb)
            p = np.asarray([
                1010.0, 896.0, 792.9, 700.0, 616.0, 541.0, 474.0, 413.0, 359.0,
                310.8, 267.7, 230.0, 197.7, 170.0, 146.0, 126.0, 108.0, 92.8,
                79.8, 68.6, 59.0, 50.7, 43.6, 37.5, 32.28, 27.8, 19.23, 13.4,
                9.4, 6.61, 4.72, 3.4, 2.48, 1.82, 1.34, 0.987, 0.537, 0.288,
                0.147, 0.071, 0.032, 0.0125, 0.00451, 0.00161, 0.000606,
                0.000248, 0.000113, 6e-05, 3.54e-05, 2.26e-05
            ])

            # Temperature (K)
            t = np.asarray([
                287.2, 281.7, 276.3, 270.9, 265.5, 260.1, 253.1, 246.1, 239.2,
                232.2, 225.2, 225.2, 225.2, 225.2, 225.2, 225.2, 225.2, 225.2,
                225.2, 225.2, 225.2, 225.2, 225.2, 225.2, 226.6, 228.1, 231.0,
                235.1, 240.0, 247.2, 254.6, 262.1, 269.5, 273.6, 276.2, 277.2,
                274.0, 262.7, 239.7, 216.6, 193.6, 170.6, 161.7, 161.6, 176.8,
                190.4, 226.0, 270.1, 322.7, 380.0
            ])

            # Density (cm-3)
            d = np.asarray([
                2.549e+19, 2.305e+19, 2.08e+19, 1.873e+19, 1.682e+19,
                1.508e+19, 1.357e+19, 1.216e+19, 1.088e+19, 9.701e+18,
                8.616e+18, 7.402e+18, 6.363e+18, 5.471e+18, 4.699e+18,
                4.055e+18, 3.476e+18, 2.987e+18, 2.568e+18, 2.208e+18,
                1.899e+18, 1.632e+18, 1.403e+18, 1.207e+18, 1.033e+18,
                8.834e+17, 6.034e+17, 4.131e+17, 2.839e+17, 1.938e+17,
                1.344e+17, 9.402e+16, 6.67e+16, 4.821e+16, 3.516e+16,
                2.581e+16, 1.421e+16, 7.946e+15, 4.445e+15, 2.376e+15,
                1.198e+15, 5.311e+14, 2.022e+14, 7.221e+13, 2.484e+13,
                9.441e+12, 3.624e+12, 1.61e+12, 7.951e+11, 4.311e+11
            ])

            # 1 :H2O (ppmv)
            g1 = np.asarray([
                11940.0, 8701.0, 6750.0, 4820.0, 3380.0, 2218.0, 1330.0, 797.1,
                399.6, 130.0, 42.4, 13.3, 6.0, 4.45, 4.0, 4.0, 4.0, 4.05, 4.3,
                4.5, 4.6, 4.7, 4.8, 4.83, 4.85, 4.9, 4.95, 5.0, 5.0, 5.0, 5.0,
                5.0, 5.0, 5.0, 5.0, 4.95, 4.85, 4.5, 4.0, 3.3, 2.7, 2.0, 1.33,
                0.85, 0.54, 0.4, 0.34, 0.28, 0.24, 0.2
            ])

            # 2 :CO2 (ppmv)
            g2 = np.asarray([
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 328.0, 320.0, 310.0, 270.0,
                195.0, 110.0, 60.0, 40.0, 35.0
            ])

            # 3 :O3 (ppmv)
            g3 = np.asarray([
                0.02412, 0.0294, 0.03379, 0.03887, 0.04478, 0.05328, 0.06564,
                0.07738, 0.09114, 0.142, 0.189, 0.305, 0.41, 0.5, 0.6, 0.7,
                0.85, 1.0, 1.3, 1.7, 2.1, 2.7, 3.3, 3.7, 4.2, 4.5, 5.3, 5.7,
                6.9, 7.7, 7.8, 7.0, 5.4, 4.2, 3.2, 2.5, 1.7, 1.2, 0.8, 0.4,
                0.2, 0.18, 0.65, 0.9, 0.8, 0.4, 0.2, 0.05, 0.005, 0.0005
            ])

            # 4 :N2O (ppmv)
            g4 = np.asarray([
                0.31, 0.31, 0.31, 0.31, 0.3079, 0.3024, 0.2906, 0.2822, 0.2759,
                0.2703, 0.2651, 0.26, 0.2549, 0.2494, 0.2433, 0.2355, 0.2282,
                0.2179, 0.2035, 0.1817, 0.1567, 0.135, 0.1218, 0.1102, 0.09893,
                0.08775, 0.07327, 0.05941, 0.04154, 0.03032, 0.01949, 0.01274,
                0.009001, 0.006286, 0.004558, 0.002795, 0.001765, 0.001214,
                0.0008866, 0.0006756, 0.0005538, 0.0004649, 0.0003979,
                0.0003459, 0.0003047, 0.0002713, 0.0002439, 0.000221,
                0.0002017, 0.0001851
            ])

            # 5 :CO (ppmv)
            g5 = np.asarray([
                0.15, 0.145, 0.1399, 0.1349, 0.1312, 0.1303, 0.1288, 0.1247,
                0.1185, 0.1094, 0.09962, 0.08964, 0.07814, 0.06374, 0.05025,
                0.03941, 0.03069, 0.02489, 0.01966, 0.01549, 0.01331, 0.01232,
                0.01232, 0.01307, 0.014, 0.0151, 0.01649, 0.01808, 0.01997,
                0.02183, 0.02343, 0.02496, 0.02647, 0.02809, 0.02999, 0.0322,
                0.0365, 0.04589, 0.06375, 0.1176, 0.3033, 0.7894, 1.823, 3.402,
                5.916, 10.43, 18.81, 28.69, 38.92, 50.0
            ])

            # 6 :CH4 (ppmv)
            g6 = np.asarray([
                1.7, 1.7, 1.7, 1.7, 1.697, 1.687, 1.672, 1.649, 1.629, 1.615,
                1.579, 1.542, 1.506, 1.471, 1.434, 1.389, 1.342, 1.29, 1.23,
                1.157, 1.072, 0.9903, 0.917, 0.8574, 0.8013, 0.7477, 0.6956,
                0.6442, 0.5888, 0.524, 0.4506, 0.3708, 0.2992, 0.2445, 0.2,
                0.166, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.14, 0.13,
                0.12, 0.11, 0.095, 0.06, 0.03
            ])

            # 7 :O2 (ppmv)
            g7 = np.asarray([
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                200000.0, 190000.0, 180000.0, 160000.0, 140000.0, 120000.0,
                94000.0, 72500.0
            ])

        # MODEL 5. SUBARCTIC WINTER
        elif option == 5:
            #
            # Latitude (deg)
            # 60.0
            # Altitude (km)
            a = np.asarray([
                0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,
                22.0, 23.0, 24.0, 25.0, 27.5, 30.0, 32.5, 35.0, 37.5, 40.0,
                42.5, 45.0, 47.5, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0,
                85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0
            ])

            # Pressure (mb)
            p = np.asarray([
                1013.0, 887.8, 777.5, 679.8, 593.2, 515.8, 446.7, 385.3, 330.8,
                282.9, 241.8, 206.7, 176.6, 151.0, 129.1, 110.3, 94.31, 80.58,
                68.82, 58.75, 50.14, 42.77, 36.47, 31.09, 26.49, 22.56, 15.13,
                10.2, 6.91, 4.701, 3.23, 2.243, 1.57, 1.113, 0.79, 0.5719,
                0.299, 0.155, 0.079, 0.04, 0.02, 0.00966, 0.0045, 0.002022,
                0.000907, 0.000423, 0.000207, 0.000108, 6e-05, 3.59e-05
            ])

            # Temperature (K)
            t = np.asarray([
                257.2, 259.1, 255.9, 252.7, 247.7, 240.9, 234.1, 227.3, 220.6,
                217.2, 217.2, 217.2, 217.2, 217.2, 217.2, 217.2, 216.6, 216.0,
                215.4, 214.8, 214.2, 213.6, 213.0, 212.4, 211.8, 211.2, 213.6,
                216.0, 218.5, 222.3, 228.5, 234.7, 240.8, 247.0, 253.2, 259.3,
                259.1, 250.9, 248.4, 245.4, 234.7, 223.9, 213.1, 202.3, 211.0,
                218.5, 234.0, 252.6, 288.5, 333.0
            ])

            # Density (cm-3)
            d = np.asarray([
                2.855e+19, 2.484e+19, 2.202e+19, 1.95e+19, 1.736e+19,
                1.552e+19, 1.383e+19, 1.229e+19, 1.087e+19, 9.44e+18,
                8.069e+18, 6.898e+18, 5.893e+18, 5.039e+18, 4.308e+18,
                3.681e+18, 3.156e+18, 2.704e+18, 2.316e+18, 1.982e+18,
                1.697e+18, 1.451e+18, 1.241e+18, 1.061e+18, 9.065e+17,
                7.742e+17, 5.134e+17, 3.423e+17, 2.292e+17, 1.533e+17,
                1.025e+17, 6.927e+16, 4.726e+16, 3.266e+16, 2.261e+16,
                1.599e+16, 8.364e+15, 4.478e+15, 2.305e+15, 1.181e+15,
                6.176e+14, 3.127e+14, 1.531e+14, 7.244e+13, 3.116e+13,
                1.403e+13, 6.412e+12, 3.099e+12, 1.507e+12, 7.814e+11
            ])

            # 1 :H2O (ppmv)
            g1 = np.asarray([
                1405.0, 1615.0, 1427.0, 1166.0, 789.8, 430.9, 236.9, 147.0,
                33.84, 29.76, 20.0, 10.0, 6.0, 4.45, 4.5, 4.55, 4.6, 4.65, 4.7,
                4.75, 4.8, 4.85, 4.9, 4.95, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
                5.0, 5.0, 5.0, 5.0, 4.95, 4.85, 4.5, 4.0, 3.3, 2.7, 2.0, 1.33,
                0.85, 0.54, 0.4, 0.34, 0.28, 0.24, 0.2
            ])

            # 2 :CO2 (ppmv)
            g2 = np.asarray([
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 328.0, 320.0, 310.0, 270.0,
                195.0, 110.0, 60.0, 40.0, 35.0
            ])

            # 3 :O3 (ppmv)
            g3 = np.asarray([
                0.01802, 0.02072, 0.02336, 0.02767, 0.03253, 0.03801, 0.04446,
                0.07252, 0.104, 0.21, 0.3, 0.35, 0.4, 0.65, 0.9, 1.2, 1.5, 1.9,
                2.45, 3.1, 3.7, 4.0, 4.2, 4.5, 4.6, 4.7, 4.9, 5.4, 5.9, 6.2,
                6.25, 5.9, 5.1, 4.1, 3.0, 2.6, 1.6, 0.95, 0.65, 0.5, 0.33,
                0.13, 0.75, 0.8, 0.8, 0.4, 0.2, 0.05, 0.005, 0.0005
            ])

            # 4 :N2O (ppmv)
            g4 = np.asarray([
                0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3195, 0.3163,
                0.3096, 0.2989, 0.2936, 0.286, 0.28, 0.2724, 0.2611, 0.2421,
                0.2174, 0.1843, 0.1621, 0.1362, 0.123, 0.1122, 0.1043, 0.0957,
                0.08598, 0.07314, 0.0571, 0.0467, 0.03439, 0.02471, 0.01631,
                0.01066, 0.007064, 0.003972, 0.002508, 0.001726, 0.00126,
                0.0009602, 0.0007554, 0.0006097, 0.0005024, 0.000421,
                0.0003579, 0.000308, 0.0002678, 0.000235, 0.0002079, 0.0001851
            ])

            # 5 :CO (ppmv)
            g5 = np.asarray([
                0.15, 0.145, 0.1399, 0.1349, 0.1312, 0.1303, 0.1288, 0.1247,
                0.1185, 0.1094, 0.09962, 0.08964, 0.07814, 0.06374, 0.05025,
                0.03941, 0.03069, 0.02489, 0.01966, 0.01549, 0.01331, 0.01232,
                0.01232, 0.01307, 0.014, 0.01521, 0.01722, 0.02037, 0.02486,
                0.03168, 0.04429, 0.06472, 0.1041, 0.1507, 0.2163, 0.3141,
                0.4842, 0.7147, 1.067, 1.516, 2.166, 3.06, 4.564, 6.877, 10.55,
                17.1, 24.73, 33.59, 41.49, 50.0
            ])

            # 6 :CH4 (ppmv)
            g6 = np.asarray([
                1.7, 1.7, 1.7, 1.7, 1.697, 1.687, 1.672, 1.649, 1.629, 1.615,
                1.579, 1.542, 1.506, 1.471, 1.434, 1.389, 1.342, 1.29, 1.23,
                1.161, 1.084, 1.014, 0.9561, 0.9009, 0.8479, 0.7961, 0.7449,
                0.6941, 0.6434, 0.5883, 0.5238, 0.4505, 0.3708, 0.3004, 0.2453,
                0.198, 0.159, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.14, 0.13,
                0.12, 0.11, 0.095, 0.06, 0.03
            ])

            # 7 :O2 (ppmv)
            g7 = np.asarray([
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                200000.0, 190000.0, 180000.0, 160000.0, 140000.0, 120000.0,
                94000.0, 72500.0
            ])

        # MODEL 6. U.S. STANDARD
        elif option == 6:
            #
            # Latitude (deg)
            # 45.5397
            # Altitude (km)
            a = np.asarray([
                0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,
                22.0, 23.0, 24.0, 25.0, 27.5, 30.0, 32.5, 35.0, 37.5, 40.0,
                42.5, 45.0, 47.5, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0,
                85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0
            ])

            # Pressure (mb)
            p = np.asarray([
                1013.0, 898.8, 795.0, 701.2, 616.6, 540.5, 472.2, 411.1, 356.5,
                308.0, 265.0, 227.0, 194.0, 165.8, 141.7, 121.1, 103.5, 88.5,
                75.65, 64.67, 55.29, 47.29, 40.47, 34.67, 29.72, 25.49, 17.43,
                11.97, 8.01, 5.746, 4.15, 2.871, 2.06, 1.491, 1.09, 0.7978,
                0.425, 0.219, 0.109, 0.0522, 0.024, 0.0105, 0.00446, 0.00184,
                0.00076, 0.00032, 0.000145, 7.1e-05, 4.01e-05, 2.54e-05
            ])

            # Temperature (K)
            t = np.asarray([
                288.2, 281.7, 275.2, 268.7, 262.2, 255.7, 249.2, 242.7, 236.2,
                229.7, 223.3, 216.8, 216.7, 216.7, 216.7, 216.7, 216.7, 216.7,
                216.7, 216.7, 216.7, 217.6, 218.6, 219.6, 220.6, 221.6, 224.0,
                226.5, 230.0, 236.5, 242.9, 250.4, 257.3, 264.2, 270.6, 270.7,
                260.8, 247.0, 233.3, 219.6, 208.4, 198.6, 188.9, 186.9, 188.4,
                195.1, 208.8, 240.0, 300.0, 360.0
            ])

            # Density (cm-3)
            d = np.asarray([
                2.548e+19, 2.313e+19, 2.094e+19, 1.891e+19, 1.704e+19,
                1.532e+19, 1.373e+19, 1.228e+19, 1.094e+19, 9.719e+18,
                8.602e+18, 7.589e+18, 6.489e+18, 5.546e+18, 4.739e+18,
                4.05e+18, 3.462e+18, 2.96e+18, 2.53e+18, 2.163e+18, 1.849e+18,
                1.575e+18, 1.342e+18, 1.144e+18, 9.765e+17, 8.337e+17,
                5.64e+17, 3.83e+17, 2.524e+17, 1.761e+17, 1.238e+17, 8.31e+16,
                5.803e+16, 4.09e+16, 2.92e+16, 2.136e+16, 1.181e+16, 6.426e+15,
                3.386e+15, 1.723e+15, 8.347e+14, 3.832e+14, 1.711e+14,
                7.136e+13, 2.924e+13, 1.189e+13, 5.033e+12, 2.144e+12,
                9.688e+11, 5.114e+11
            ])

            # 1 :H2O (ppmv)
            g1 = np.asarray([
                7745.0, 6071.0, 4631.0, 3182.0, 2158.0, 1397.0, 925.4, 572.0,
                366.7, 158.3, 69.96, 36.13, 19.06, 10.85, 5.927, 5.0, 3.95,
                3.85, 3.825, 3.85, 3.9, 3.975, 4.065, 4.2, 4.3, 4.425, 4.575,
                4.725, 4.825, 4.9, 4.95, 5.025, 5.15, 5.225, 5.25, 5.225, 5.1,
                4.75, 4.2, 3.5, 2.825, 2.05, 1.33, 0.85, 0.54, 0.4, 0.34, 0.28,
                0.24, 0.2
            ])

            # 2 :CO2 (ppmv)
            g2 = np.asarray([
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0, 330.0,
                330.0, 330.0, 330.0, 330.0, 330.0, 328.0, 320.0, 310.0, 270.0,
                195.0, 110.0, 60.0, 40.0, 35.0
            ])

            # 3 :O3 (ppmv)
            g3 = np.asarray([
                0.0266, 0.02931, 0.03237, 0.03318, 0.03387, 0.03768, 0.04112,
                0.05009, 0.05966, 0.09168, 0.1313, 0.2149, 0.3095, 0.3846,
                0.503, 0.6505, 0.8701, 1.187, 1.587, 2.03, 2.579, 3.028, 3.647,
                4.168, 4.627, 5.118, 5.803, 6.553, 7.373, 7.837, 7.8, 7.3, 6.2,
                5.25, 4.1, 3.1, 1.8, 1.1, 0.7, 0.3, 0.25, 0.3, 0.5, 0.7, 0.7,
                0.4, 0.2, 0.05, 0.005, 0.0005
            ])

            # 4 :N2O (ppmv)
            g4 = np.asarray([
                0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3195,
                0.3179, 0.314, 0.3095, 0.3048, 0.2999, 0.2944, 0.2877, 0.2783,
                0.2671, 0.2527, 0.2365, 0.2194, 0.2051, 0.1967, 0.1875, 0.1756,
                0.1588, 0.1416, 0.1165, 0.09275, 0.06693, 0.04513, 0.02751,
                0.01591, 0.009378, 0.004752, 0.003, 0.002065, 0.001507,
                0.001149, 0.000889, 0.0007056, 0.0005716, 0.0004708, 0.0003932,
                0.0003323, 0.0002837, 0.0002443, 0.000212, 0.0001851
            ])

            # 5 :CO (ppmv)
            g5 = np.asarray([
                0.15, 0.145, 0.1399, 0.1349, 0.1312, 0.1303, 0.1288, 0.1247,
                0.1185, 0.1094, 0.09962, 0.08964, 0.07814, 0.06374, 0.05025,
                0.03941, 0.03069, 0.02489, 0.01966, 0.01549, 0.01331, 0.01232,
                0.01232, 0.01307, 0.014, 0.01498, 0.01598, 0.0171, 0.0185,
                0.02009, 0.0222, 0.02497, 0.02824, 0.03241, 0.03717, 0.04597,
                0.06639, 0.1073, 0.1862, 0.3059, 0.6375, 1.497, 3.239, 5.843,
                10.13, 16.92, 24.67, 33.56, 41.48, 50.0
            ])

            # 6 :CH4 (ppmv)
            g6 = np.asarray([
                1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.699, 1.697, 1.693, 1.685,
                1.675, 1.662, 1.645, 1.626, 1.605, 1.582, 1.553, 1.521, 1.48,
                1.424, 1.355, 1.272, 1.191, 1.118, 1.055, 0.987, 0.9136, 0.83,
                0.746, 0.6618, 0.5638, 0.4614, 0.3631, 0.2773, 0.21, 0.165,
                0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.14, 0.13, 0.12, 0.11,
                0.095, 0.06, 0.03
            ])

            # 7 :O2 (ppmv)
            g7 = np.asarray([
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                209000.0, 209000.0, 209000.0, 209000.0, 209000.0, 209000.0,
                200000.0, 190000.0, 180000.0, 160000.0, 140000.0, 120000.0,
                94000.0, 72500.0
            ])

        md = np.column_stack((g1, g2, g3, g4, g5, g6, g7))

        return a, p, d, t, md

    @staticmethod
    def gl_atm_minor() -> np.ndarray:
        """Returns the minor gas profiles (gas ID's 8-28)

        Returns:
            (numpy.ndarray):

            * md (numpy.ndarray): molecular densities (ppmv) (50x #gases)
            * gasids (numpy.ndarray): HITRAN gas ID #'s (#gases x 1)
        """
        # CONSTITUENT PROFILES FOR THE MINOR ABSORBING ATMOSPHERIC GASES
        #
        # MINGAS

        # 8 :NO (ppmv)
        g8 = np.asarray([
            0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003,
            0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.000299, 0.000295,
            0.000283, 0.000268, 0.000252, 0.00024, 0.000244, 0.000255,
            0.000277, 0.000307, 0.00036, 0.000451, 0.000685, 0.00128, 0.00245,
            0.00453, 0.00714, 0.00934, 0.0112, 0.0119, 0.0117, 0.011, 0.0103,
            0.0101, 0.0101, 0.0103, 0.0115, 0.0161, 0.0268, 0.0701, 0.213,
            0.712, 2.08, 4.5, 7.98, 10.0, 10.0
        ])

        # 9 :SO2 (ppmv)
        g9 = np.asarray([
            0.0003, 0.000274, 0.000236, 0.00019, 0.000146, 0.000118, 9.71e-05,
            8.3e-05, 7.21e-05, 6.56e-05, 6.08e-05, 5.79e-05, 5.6e-05, 5.59e-05,
            5.64e-05, 5.75e-05, 5.75e-05, 5.37e-05, 4.78e-05, 3.97e-05,
            3.19e-05, 2.67e-05, 2.28e-05, 2.07e-05, 1.9e-05, 1.75e-05,
            1.54e-05, 1.34e-05, 1.21e-05, 1.16e-05, 1.21e-05, 1.36e-05,
            1.65e-05, 2.1e-05, 2.77e-05, 3.56e-05, 4.59e-05, 5.15e-05,
            5.11e-05, 4.32e-05, 2.83e-05, 1.33e-05, 5.56e-06, 2.24e-06,
            8.96e-07, 3.58e-07, 1.43e-07, 5.73e-08, 2.29e-08, 9.17e-09
        ])

        # 10 :NO2 (ppmv)
        g10 = np.asarray([
            2.3e-05, 2.3e-05, 2.3e-05, 2.3e-05, 2.3e-05, 2.3e-05, 2.3e-05,
            2.3e-05, 2.3e-05, 2.32e-05, 2.38e-05, 2.62e-05, 3.15e-05, 4.45e-05,
            7.48e-05, 0.000171, 0.000319, 0.000519, 0.000771, 0.00106, 0.00139,
            0.00176, 0.00216, 0.00258, 0.00306, 0.00374, 0.00481, 0.00616,
            0.00721, 0.00728, 0.00626, 0.00403, 0.00217, 0.00115, 0.000666,
            0.000443, 0.000339, 0.000285, 0.000253, 0.000231, 0.000215,
            0.000202, 0.000192, 0.000183, 0.000176, 0.00017, 0.000164,
            0.000159, 0.000155, 0.000151
        ])

        # 11 :NH3 (ppmv)
        g11 = np.asarray([
            0.0005, 0.0005, 0.000463, 0.00038, 0.000288, 0.000204, 0.000146,
            9.88e-05, 6.48e-05, 3.77e-05, 2.03e-05, 1.09e-05, 6.3e-06,
            3.12e-06, 1.11e-06, 4.47e-07, 2.11e-07, 1.1e-07, 6.7e-08, 3.97e-08,
            2.41e-08, 1.92e-08, 1.72e-08, 1.59e-08, 1.44e-08, 1.23e-08,
            9.37e-09, 6.35e-09, 3.68e-09, 1.82e-09, 9.26e-10, 2.94e-10,
            8.72e-11, 2.98e-11, 1.3e-11, 7.13e-12, 4.8e-12, 3.66e-12, 3e-12,
            2.57e-12, 2.27e-12, 2.04e-12, 1.85e-12, 1.71e-12, 1.59e-12,
            1.48e-12, 1.4e-12, 1.32e-12, 1.25e-12, 1.19e-12
        ])

        # 12 :HNO3 (ppmv)
        g12 = np.asarray([
            5e-05, 5.96e-05, 6.93e-05, 7.91e-05, 8.87e-05, 9.75e-05, 0.000111,
            0.000126, 0.000139, 0.000153, 0.000174, 0.000202, 0.000241,
            0.000276, 0.000333, 0.000452, 0.000737, 0.00131, 0.00211, 0.00317,
            0.0042, 0.00494, 0.00546, 0.00574, 0.00584, 0.00561, 0.00482,
            0.00374, 0.00259, 0.00164, 0.000968, 0.000533, 0.000252, 0.000121,
            7.7e-05, 5.55e-05, 4.45e-05, 3.84e-05, 3.49e-05, 3.27e-05,
            3.12e-05, 3.01e-05, 2.92e-05, 2.84e-05, 2.78e-05, 2.73e-05,
            2.68e-05, 2.64e-05, 2.6e-05, 2.57e-05
        ])

        # 13 :OH (ppmv)
        g13 = np.asarray([
            4.4e-08, 4.4e-08, 4.4e-08, 4.4e-08, 4.4e-08, 4.4e-08, 4.4e-08,
            4.41e-08, 4.45e-08, 4.56e-08, 4.68e-08, 4.8e-08, 4.94e-08,
            5.19e-08, 5.65e-08, 6.75e-08, 8.25e-08, 1.04e-07, 1.3e-07,
            1.64e-07, 2.16e-07, 3.4e-07, 5.09e-07, 7.59e-07, 1.16e-06,
            2.18e-06, 5e-06, 1.17e-05, 3.4e-05, 8.35e-05, 0.00017, 0.000285,
            0.000406, 0.000511, 0.000579, 0.000675, 0.000953, 0.00176, 0.00374,
            0.00719, 0.0112, 0.0113, 0.0061, 0.00151, 0.000242, 4.47e-05,
            1.77e-05, 1.19e-05, 1.35e-05, 2.2e-05
        ])

        # 14 :HF (ppmv)
        g14 = np.asarray([
            1e-08, 1e-08, 1.23e-08, 1.97e-08, 3.18e-08, 5.63e-08, 9.18e-08,
            1.53e-07, 2.41e-07, 4.04e-07, 6.57e-07, 1.2e-06, 1.96e-06,
            3.12e-06, 4.62e-06, 7.09e-06, 1.05e-05, 1.69e-05, 2.57e-05,
            4.02e-05, 5.77e-05, 7.77e-05, 9.9e-05, 0.000123, 0.00015, 0.000182,
            0.00023, 0.000283, 0.00032, 0.000348, 0.000372, 0.000395, 0.00041,
            0.000421, 0.000424, 0.000425, 0.000425, 0.000425, 0.000425,
            0.000425, 0.000425, 0.000425, 0.000425, 0.000425, 0.000425,
            0.000425, 0.000425, 0.000425, 0.000425, 0.000425
        ])

        # 15 :HCl (ppmv)
        g15 = np.asarray([
            0.001, 0.000749, 0.000561, 0.000422, 0.000319, 0.000239, 0.000179,
            0.000132, 9.96e-05, 7.48e-05, 5.68e-05, 4.59e-05, 4.36e-05,
            6.51e-05, 0.000101, 0.000163, 0.000237, 0.000313, 0.000385,
            0.000442, 0.000489, 0.000522, 0.000549, 0.000575, 0.000604,
            0.000651, 0.000751, 0.000988, 0.00128, 0.00157, 0.00169, 0.00174,
            0.00176, 0.00179, 0.0018, 0.0018, 0.0018, 0.0018, 0.0018, 0.0018,
            0.0018, 0.0018, 0.0018, 0.0018, 0.0018, 0.0018, 0.0018, 0.0018,
            0.0018, 0.0018
        ])

        # 16 :HBr (ppmv)
        g16 = np.asarray([
            1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06,
            1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06,
            1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06,
            1.7e-06, 1.7e-06, 1.7e-06, 1.7e-06, 1.71e-06, 1.76e-06, 1.9e-06,
            2.26e-06, 2.82e-06, 3.69e-06, 4.91e-06, 6.13e-06, 6.85e-06,
            7.08e-06, 7.14e-06, 7.15e-06, 7.15e-06, 7.15e-06, 7.15e-06,
            7.15e-06, 7.15e-06, 7.15e-06, 7.15e-06, 7.15e-06, 7.15e-06,
            7.15e-06, 7.15e-06, 7.15e-06, 7.15e-06
        ])

        # 17 :HI (ppmv)
        g17 = np.asarray([
            3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06,
            3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06,
            3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06,
            3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06,
            3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06, 3e-06,
            3e-06, 3e-06, 3e-06, 3e-06, 3e-06
        ])

        # 18 :ClO (ppmv)
        g18 = np.asarray([
            1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1.01e-08,
            1.05e-08, 1.21e-08, 1.87e-08, 3.18e-08, 5.61e-08, 9.99e-08,
            1.78e-07, 3.16e-07, 5.65e-07, 1.04e-06, 2.04e-06, 4.64e-06,
            8.15e-06, 1.07e-05, 1.52e-05, 2.24e-05, 3.97e-05, 8.48e-05,
            0.000185, 0.000357, 0.000508, 0.000607, 0.000595, 0.000433,
            0.000251, 0.000156, 0.000104, 7.69e-05, 6.3e-05, 5.52e-05,
            5.04e-05, 4.72e-05, 4.49e-05, 4.3e-05, 4.16e-05, 4.03e-05,
            3.93e-05, 3.83e-05, 3.75e-05, 3.68e-05, 3.61e-05
        ])

        # 19 :OCS (ppmv)
        g19 = np.asarray([
            0.0006, 0.00059, 0.00058, 0.00057, 0.000562, 0.000555, 0.000548,
            0.00054, 0.000532, 0.000525, 0.000518, 0.000509, 0.000498,
            0.000482, 0.00046, 0.000426, 0.000388, 0.000348, 0.000309,
            0.000274, 0.000241, 0.000214, 0.000188, 0.000164, 0.000137,
            0.000108, 6.7e-05, 2.96e-05, 1.21e-05, 4.31e-06, 1.6e-06, 6.71e-07,
            4.35e-07, 3.34e-07, 2.8e-07, 2.47e-07, 2.28e-07, 2.16e-07,
            2.08e-07, 2.03e-07, 1.98e-07, 1.95e-07, 1.92e-07, 1.89e-07,
            1.87e-07, 1.85e-07, 1.83e-07, 1.81e-07, 1.8e-07, 1.78e-07
        ])

        # 20 :H2CO (ppmv)
        g20 = np.asarray([
            0.0024, 0.00107, 0.000404, 0.000227, 0.00014, 0.0001, 7.44e-05,
            6.04e-05, 5.01e-05, 4.22e-05, 3.63e-05, 3.43e-05, 3.39e-05,
            3.5e-05, 3.62e-05, 3.62e-05, 3.58e-05, 3.5e-05, 3.42e-05, 3.39e-05,
            3.43e-05, 3.68e-05, 4.03e-05, 4.5e-05, 5.06e-05, 5.82e-05,
            7.21e-05, 8.73e-05, 0.000101, 0.000111, 0.000113, 0.000103,
            7.95e-05, 4.82e-05, 1.63e-05, 5.1e-06, 2e-06, 1.05e-06, 6.86e-07,
            5.14e-07, 4.16e-07, 3.53e-07, 3.09e-07, 2.76e-07, 2.5e-07, 2.3e-07,
            2.13e-07, 1.98e-07, 1.86e-07, 1.75e-07
        ])

        # 21 :HOCl (ppmv)
        g21 = np.asarray([
            7.7e-06, 1.06e-05, 1.22e-05, 1.14e-05, 9.8e-06, 8.01e-06, 6.42e-06,
            5.42e-06, 4.7e-06, 4.41e-06, 4.34e-06, 4.65e-06, 5.01e-06,
            5.22e-06, 5.6e-06, 6.86e-06, 8.77e-06, 1.2e-05, 1.63e-05, 2.26e-05,
            3.07e-05, 4.29e-05, 5.76e-05, 7.65e-05, 9.92e-05, 0.000131,
            0.000184, 0.000245, 0.000296, 0.000321, 0.000304, 0.000248,
            0.000164, 9.74e-05, 4.92e-05, 2.53e-05, 1.5e-05, 1.05e-05,
            8.34e-06, 7.11e-06, 6.33e-06, 5.78e-06, 5.37e-06, 5.05e-06,
            4.78e-06, 4.56e-06, 4.37e-06, 4.21e-06, 4.06e-06, 3.93e-06
        ])

        # 22 :N2 (ppmv)
        g22 = np.asarray([
            781000.0, 781000.0, 781000.0, 781000.0, 781000.0, 781000.0,
            781000.0, 781000.0, 781000.0, 781000.0, 781000.0, 781000.0,
            781000.0, 781000.0, 781000.0, 781000.0, 781000.0, 781000.0,
            781000.0, 781000.0, 781000.0, 781000.0, 781000.0, 781000.0,
            781000.0, 781000.0, 781000.0, 781000.0, 781000.0, 781000.0,
            781000.0, 781000.0, 781000.0, 781000.0, 781000.0, 781000.0,
            781000.0, 781000.0, 781000.0, 781000.0, 781000.0, 781000.0,
            781000.0, 780000.0, 779000.0, 777000.0, 774000.0, 770000.0,
            765000.0, 760000.0
        ])

        # 23 :NCN (ppmv)
        g23 = np.asarray([
            0.00017, 0.000165, 0.000163, 0.000161, 0.00016, 0.00016, 0.00016,
            0.00016, 0.00016, 0.00016, 0.00016, 0.00016, 0.00016, 0.000159,
            0.000157, 0.000155, 0.000152, 0.000149, 0.000145, 0.000141,
            0.000137, 0.000134, 0.00013, 0.000125, 0.000119, 0.000113,
            0.000105, 9.73e-05, 9.04e-05, 8.46e-05, 8.02e-05, 7.63e-05,
            7.3e-05, 7e-05, 6.7e-05, 6.43e-05, 6.21e-05, 6.02e-05, 5.88e-05,
            5.75e-05, 5.62e-05, 5.5e-05, 5.37e-05, 5.25e-05, 5.12e-05, 5e-05,
            4.87e-05, 4.75e-05, 4.62e-05, 4.5e-05
        ])

        # 24 :CH3Cl (ppmv)
        g24 = np.asarray([
            0.0007, 0.00067, 0.000643, 0.000622, 0.000607, 0.000602, 0.0006,
            0.0006, 0.000598, 0.000594, 0.000588, 0.000579, 0.000566, 0.000548,
            0.000528, 0.000503, 0.000477, 0.000449, 0.000421, 0.000395,
            0.000369, 0.000343, 0.000317, 0.000286, 0.000248, 0.000191,
            0.00011, 4.72e-05, 1.79e-05, 7.35e-06, 3.03e-06, 1.32e-06,
            8.69e-07, 6.68e-07, 5.6e-07, 4.94e-07, 4.56e-07, 4.32e-07,
            4.17e-07, 4.05e-07, 3.96e-07, 3.89e-07, 3.83e-07, 3.78e-07,
            3.73e-07, 3.69e-07, 3.66e-07, 3.62e-07, 3.59e-07, 3.56e-07
        ])

        # 25 :H2O2 (ppmv)
        g25 = np.asarray([
            0.0002, 0.000195, 0.000192, 0.000189, 0.000184, 0.000177, 0.000166,
            0.000149, 0.000123, 9.09e-05, 5.79e-05, 3.43e-05, 1.95e-05,
            1.08e-05, 6.59e-06, 4.2e-06, 2.94e-06, 2.3e-06, 2.24e-06, 2.68e-06,
            3.68e-06, 5.62e-06, 1.03e-05, 1.97e-05, 3.7e-05, 6.2e-05, 0.000103,
            0.000136, 0.000136, 0.000113, 8.51e-05, 6.37e-05, 5.17e-05,
            4.44e-05, 3.8e-05, 3.48e-05, 3.62e-05, 5.25e-05, 0.000126,
            0.000377, 0.00112, 0.002, 0.00168, 0.000431, 4.98e-05, 6.76e-06,
            8.38e-07, 9.56e-08, 1e-08, 1e-09
        ])

        # 26 :C2H2 (ppmv)
        g26 = np.asarray([
            0.0003, 0.000172, 9.57e-05, 6.74e-05, 5.07e-05, 3.99e-05, 3.19e-05,
            2.8e-05, 2.55e-05, 2.4e-05, 2.27e-05, 2.08e-05, 1.76e-05, 1.23e-05,
            7.32e-06, 4.52e-06, 2.59e-06, 1.55e-06, 8.63e-07, 5.3e-07, 3.1e-07,
            1.89e-07, 1.04e-07, 5.75e-08, 2.23e-08, 8.51e-09, 4.09e-09,
            2.52e-09, 1.86e-09, 1.52e-09, 1.32e-09, 1.18e-09, 1.08e-09,
            9.97e-10, 9.34e-10, 8.83e-10, 8.43e-10, 8.1e-10, 7.83e-10, 7.6e-10,
            7.4e-10, 7.23e-10, 7.07e-10, 6.94e-10, 6.81e-10, 6.7e-10, 6.59e-10,
            6.49e-10, 6.4e-10, 6.32e-10
        ])

        # 27 :C2H6 (ppmv)
        g27 = np.asarray([
            0.002, 0.002, 0.002, 0.002, 0.00198, 0.00195, 0.0019, 0.00185,
            0.00179, 0.00172, 0.00158, 0.0013, 0.000986, 0.000722, 0.000496,
            0.000335, 0.000214, 0.000149, 0.000105, 7.96e-05, 6.01e-05,
            4.57e-05, 3.4e-05, 2.6e-05, 1.89e-05, 1.22e-05, 5.74e-06, 2.14e-06,
            8.49e-07, 3.42e-07, 1.34e-07, 5.39e-08, 2.25e-08, 1.04e-08,
            6.57e-09, 4.74e-09, 3.79e-09, 3.28e-09, 2.98e-09, 2.79e-09,
            2.66e-09, 2.56e-09, 2.49e-09, 2.43e-09, 2.37e-09, 2.33e-09,
            2.29e-09, 2.25e-09, 2.22e-09, 2.19e-09
        ])

        # 28 :PH3 (ppmv)
        g28 = np.asarray([
            1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14,
            1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14,
            1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14,
            1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14,
            1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14, 1e-14,
            1e-14, 1e-14, 1e-14, 1e-14, 1e-14
        ])

        # gasids = (arange(8, 28)).T
        # g8 = g8.T.reshape(50, 1, order='F')
        # g9 = g9.T.reshape(50, 1, order='F')
        # g10 = g10.T.reshape(50, 1, order='F')
        # g11 = g11.T.reshape(50, 1, order='F')
        # g12 = g12.T.reshape(50, 1, order='F')
        # g13 = g13.T.reshape(50, 1, order='F')
        # g14 = g14.T.reshape(50, 1, order='F')
        # g15 = g15.T.reshape(50, 1, order='F')
        # g16 = g16.T.reshape(50, 1, order='F')
        # g17 = g17.T.reshape(50, 1, order='F')
        # g18 = g18.T.reshape(50, 1, order='F')
        # g19 = g19.T.reshape(50, 1, order='F')
        # g20 = g20.T.reshape(50, 1, order='F')
        # g21 = g21.T.reshape(50, 1, order='F')
        # g22 = g22.T.reshape(50, 1, order='F')
        # g23 = g23.T.reshape(50, 1, order='F')
        # g24 = g24.T.reshape(50, 1, order='F')
        # g25 = g25.T.reshape(50, 1, order='F')
        # g26 = g26.T.reshape(50, 1, order='F')
        # g27 = g27.T.reshape(50, 1, order='F')
        # g28 = g28.T.reshape(50, 1, order='F')
        md = np.column_stack([
            g8, g9, g10, g11, g12, g13, g14, g15, g16, g17, g18, g19, g20, g21,
            g22, g23, g24, g25, g26, g27, g28
        ])

        return md

    @staticmethod
    def gl_atm_trace() -> np.ndarray:
        """Returns the trace gas and xsection profiles (ID's 29-31,51-63)

        Returns:
            (numpy.ndarray):

            * md (numpy.ndarray:) molecular densities (ppmv) (50x #gases)
            * gasids (numpy.ndarray): HITRAN gas ID #'s (#gases x 1)
        """
        # ************************************************************************
        # ATMOSPHERIC PROFILES OF THE MINOR GASES (ID>28)
        # REFERENCES
        # ATMOS with no further reference refers to the profile
        # set distributed by diskette
        # Smith, M.A.H., Compilation of atmospheric gas
        # concentration profiles from 0 to 50km,
        # NASA Tech.Mem. 83289, 1982
        # Rinsland, C.P., et al., JGR 94 D15 18341-18349, 1989
        #
        # Rinsland, C.P., et al., JGR 95 D10 16477-16490, 1990
        # Copy of FASCODE XMLATM BLOCK DATA
        # Data from Mark Allen at JPL/private communication to Gail Anderson
        # ************************************************************************
        #  COF2
        #   0 - 14   ATMOS SS Rinsland 1990: ConsAt 14 value
        #  14 -120   ATMOS SS Rinsland 1990: LinExLogMix until 1.0E-15
        # 29
        g29 = np.asarray([
            5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06,
            5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 7.07e-06, 1e-05,
            1.42e-05, 2.01e-05, 2.5e-05, 3.12e-05, 3.89e-05, 4.84e-05,
            5.71e-05, 6.74e-05, 7.47e-05, 9.32e-05, 0.000111, 0.000117,
            0.00011, 9.31e-05, 7.38e-05, 5.81e-05, 4.57e-05, 3.6e-05, 2.83e-05,
            1.75e-05, 1.08e-05, 6.72e-06, 4.16e-06, 2.57e-06, 1e-15, 1e-15,
            1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15
        ])
        #  SF6
        #   0 - 14   ATMOS SS Rinsland 1990: ConsAt 14 value
        #  14 -120   ATMOS SS Rinsland 1990: LinExLogMix until 1.0E-15
        g30 = np.asarray([
            1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06,
            1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06,
            1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06, 1.42e-06,
            1.42e-06, 1.26e-06, 1.12e-06, 9.64e-07, 8.3e-07, 8.3e-07, 8.3e-07,
            8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07,
            8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07, 8.3e-07,
            8.3e-07, 8.3e-07, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15,
            1e-15, 1e-15
        ])
        # function/glatm.m:1295
        #  H2S
        #   0 - 120   Smith 1982: until 1.0E-15
        g31 = np.asarray([
            0.0001, 5.48e-05, 3e-05, 2.45e-05, 2e-05, 1.61e-05, 1.3e-05,
            1.14e-05, 1e-05, 8.37e-06, 7e-06, 4.58e-06, 3e-06, 1.73e-06, 1e-06,
            5.48e-07, 3e-07, 1.73e-07, 1e-07, 5.48e-08, 3e-08, 1.73e-08, 1e-08,
            5.48e-09, 3e-09, 1.73e-09, 1e-09, 1e-10, 1e-11, 1e-12, 1e-13,
            1e-14, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15,
            1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15,
            1e-15
        ])
        # function/glatm.m:1310
        #  CCL3F (F11)
        #   0 -120   Mark Allen/FASCODE
        g51 = np.asarray([
            0.00014, 0.00014, 0.0001399, 0.0001399, 0.0001398, 0.0001397,
            0.0001396, 0.0001396, 0.0001395, 0.0001394, 0.0001392, 0.0001389,
            0.0001386, 0.0001368, 0.0001349, 0.0001292, 0.0001234, 0.0001138,
            0.0001041, 9.216e-05, 8.021e-05, 6.799e-05, 5.576e-05, 4.48e-05,
            3.384e-05, 2.55e-05, 9.634e-06, 2.441e-06, 5.553e-07, 1.024e-07,
            1.581e-08, 1.939e-09, 3.811e-10, 7.716e-11, 1.585e-11, 3.658e-12,
            4.173e-13, 3.465e-14, 3.353e-15, 2.383e-16, 2.084e-17, 1.346e-18,
            1.08e-19, 6.099e-21, 4.246e-22, 1.923e-23, 1.11e-24, 5.158e-26,
            3.393e-27, 3.738e-28
        ])
        # function/glatm.m:1325
        #  CCL2F2 (CFC12)
        #   0 -120   Mark Allen/FASCODE
        g52 = np.asarray([
            0.00024, 0.00024, 0.0002399, 0.0002399, 0.0002398, 0.0002398,
            0.0002397, 0.0002396, 0.0002395, 0.0002394, 0.0002393, 0.000239,
            0.0002387, 0.000237, 0.0002353, 0.00023, 0.0002247, 0.0002157,
            0.0002066, 0.0001952, 0.0001838, 0.0001712, 0.0001585, 0.0001452,
            0.0001319, 0.0001183, 8.552e-05, 5.683e-05, 3.498e-05, 2.013e-05,
            1.111e-05, 6.014e-06, 3.446e-06, 1.998e-06, 1.181e-06, 7.687e-07,
            3.876e-07, 1.818e-07, 8.265e-08, 3.432e-08, 1.38e-08, 4.984e-09,
            1.704e-09, 4.917e-10, 1.272e-10, 2.351e-11, 3.64e-12, 4.251e-13,
            4.981e-14, 8.792e-15
        ])
        # function/glatm.m:1340
        #  CCLF3  (CFC13)
        #   0 - 120   Smith 1982: until 1.0E-15
        g53 = np.asarray([
            5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06, 5e-06,
            5e-06, 5e-06, 5e-06, 5e-06, 4.58e-06, 4.2e-06, 4.05e-06, 3.9e-06,
            3.75e-06, 3.6e-06, 3.45e-06, 3.3e-06, 3.2e-06, 3.1e-06, 3.05e-06,
            3e-06, 2.9e-06, 2.57e-06, 2.2e-06, 2.1e-06, 2.05e-06, 1.92e-06,
            1.8e-06, 1.67e-06, 1.55e-06, 1.42e-06, 1.3e-06, 1.08e-06, 8.97e-07,
            7.46e-07, 6.2e-07, 5.15e-07, 1e-07, 1e-08, 1e-09, 1e-10, 1e-12,
            1e-14, 1e-15, 1e-15, 1e-15
        ])
        # function/glatm.m:1355
        #  CF4 (CFC14)
        #   0 - 10   ATMOS SS: ConsAt 10.5 value
        #  11 - 30   ATMOS SS: LinExLogMix
        #  30 - 75   ATMOS SS: ConsAt 31.5 value
        #  75 -120   1.0E-15
        g54 = np.asarray([
            5.78e-05, 5.78e-05, 5.78e-05, 5.78e-05, 5.78e-05, 5.78e-05,
            5.78e-05, 5.78e-05, 5.78e-05, 5.78e-05, 5.78e-05, 5.86e-05,
            6.02e-05, 6e-05, 5.8e-05, 5.66e-05, 5.64e-05, 5.68e-05, 5.74e-05,
            5.82e-05, 5.89e-05, 5.94e-05, 5.98e-05, 6.02e-05, 6.06e-05,
            6.07e-05, 5.9e-05, 5.64e-05, 5.94e-05, 5.94e-05, 5.94e-05,
            5.94e-05, 5.94e-05, 5.94e-05, 5.94e-05, 5.94e-05, 5.94e-05,
            5.94e-05, 5.94e-05, 5.94e-05, 5.94e-05, 1e-15, 1e-15, 1e-15, 1e-15,
            1e-15, 1e-15, 1e-15, 1e-15, 1e-15
        ])
        #  CHCl2F (CFC21)
        #   0 - 120   Smith 1982: until 1.0E-15
        g55 = np.asarray([
            1.6e-06, 1.5e-06, 1.4e-06, 1.35e-06, 1.3e-06, 1.25e-06, 1.2e-06,
            1.15e-06, 1.1e-06, 1.05e-06, 1e-06, 8.5e-07, 7e-07, 5.5e-07, 4e-07,
            3e-07, 2e-07, 1.5e-07, 1e-07, 7.5e-08, 5e-08, 3.5e-08, 2e-08,
            1.5e-08, 1e-08, 6.5e-09, 1e-09, 3e-10, 1.5e-10, 1e-11, 1e-12,
            1e-13, 1e-14, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15,
            1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15,
            1e-15
        ])
        #  CHCLF2 (CFC22)
        #   0 -120   Mark Allen/FASCODE
        g56 = np.asarray([
            6e-05, 5.994e-05, 5.987e-05, 5.982e-05, 5.977e-05, 5.974e-05,
            5.97e-05, 5.968e-05, 5.966e-05, 5.963e-05, 5.96e-05, 5.955e-05,
            5.949e-05, 5.921e-05, 5.893e-05, 5.808e-05, 5.723e-05, 5.582e-05,
            5.441e-05, 5.265e-05, 5.089e-05, 4.897e-05, 4.705e-05, 4.502e-05,
            4.298e-05, 4.084e-05, 3.548e-05, 3.021e-05, 2.514e-05, 2.062e-05,
            1.686e-05, 1.392e-05, 1.184e-05, 1.036e-05, 9.356e-06, 8.784e-06,
            8.163e-06, 7.741e-06, 7.449e-06, 7.201e-06, 6.919e-06, 6.524e-06,
            5.872e-06, 4.867e-06, 3.396e-06, 1.808e-06, 6.935e-07, 2.066e-07,
            5.485e-08, 1.93e-08
        ])
        #  C2CL3F3 (CFC113)
        #   0 -120   Mark Allen/FASCODE
        g57 = np.asarray([
            1.9e-05, 1.9e-05, 1.899e-05, 1.899e-05, 1.898e-05, 1.898e-05,
            1.897e-05, 1.896e-05, 1.895e-05, 1.894e-05, 1.893e-05, 1.89e-05,
            1.887e-05, 1.871e-05, 1.854e-05, 1.803e-05, 1.751e-05, 1.664e-05,
            1.576e-05, 1.466e-05, 1.356e-05, 1.236e-05, 1.116e-05, 9.931e-06,
            8.702e-06, 7.515e-06, 4.787e-06, 2.678e-06, 1.366e-06, 6.37e-07,
            2.82e-07, 1.222e-07, 5.93e-08, 2.949e-08, 1.507e-08, 8.617e-09,
            3.55e-09, 1.304e-09, 4.61e-10, 1.427e-10, 4.322e-11, 1.131e-11,
            2.861e-12, 5.798e-13, 1.059e-13, 1.182e-14, 9.372e-16, 3.545e-17,
            1.223e-18, 6.979e-20
        ])
        #  C2CL2F4 (CFC114)
        #   0 -120   Mark Allen/FASCODE
        g58 = np.asarray([
            1.2e-05, 1.2e-05, 1.2e-05, 1.2e-05, 1.199e-05, 1.199e-05,
            1.199e-05, 1.199e-05, 1.198e-05, 1.198e-05, 1.198e-05, 1.197e-05,
            1.196e-05, 1.191e-05, 1.185e-05, 1.167e-05, 1.149e-05, 1.12e-05,
            1.09e-05, 1.053e-05, 1.015e-05, 9.731e-06, 9.311e-06, 8.865e-06,
            8.419e-06, 7.949e-06, 6.77e-06, 5.62e-06, 4.547e-06, 3.623e-06,
            2.884e-06, 2.315e-06, 1.906e-06, 1.6e-06, 1.375e-06, 1.231e-06,
            1.037e-06, 8.645e-07, 7.14e-07, 5.799e-07, 4.61e-07, 3.53e-07,
            2.524e-07, 1.588e-07, 7.585e-08, 2.131e-08, 3.107e-09, 2.089e-10,
            1.084e-11, 8.968e-13
        ])
        #  C2CLF5  (CFC115)
        #   0 - 120   Smith 1982: until 1.0E-15
        g59 = np.asarray([
            4e-06, 4e-06, 4e-06, 4e-06, 4e-06, 4e-06, 4e-06, 4e-06, 4e-06,
            4e-06, 4e-06, 4e-06, 4e-06, 3.74e-06, 3.5e-06, 3.24e-06, 3e-06,
            2.79e-06, 2.6e-06, 2.45e-06, 2.3e-06, 2.09e-06, 1.9e-06, 1.74e-06,
            1.6e-06, 1.5e-06, 1.32e-06, 1.2e-06, 1.07e-06, 9.49e-07, 8.24e-07,
            7e-07, 5.92e-07, 5.14e-07, 4.6e-07, 4.2e-07, 3.53e-07, 2.97e-07,
            2.5e-07, 2.11e-07, 1.77e-07, 1e-09, 1e-11, 1e-13, 1e-15, 1e-15,
            1e-15, 1e-15, 1e-15, 1e-15
        ])
        #  CCL4
        #   0 -120   Mark Allen/FASCODE
        g60 = np.asarray([
            0.00013, 0.00013, 0.0001299, 0.0001299, 0.0001298, 0.0001297,
            0.0001296, 0.0001295, 0.0001294, 0.0001293, 0.0001292, 0.0001289,
            0.0001285, 0.0001266, 0.0001247, 0.0001187, 0.0001127, 0.0001026,
            9.256e-05, 8.037e-05, 6.817e-05, 5.611e-05, 4.405e-05, 3.395e-05,
            2.385e-05, 1.701e-05, 5.027e-06, 8.202e-07, 1.204e-07, 1.304e-08,
            1.05e-09, 4.864e-11, 5.081e-12, 5.372e-13, 5.548e-14, 5.688e-15,
            2.281e-16, 5.092e-18, 1.699e-19, 3.184e-21, 9.6e-23, 1.638e-24,
            4.605e-26, 6.985e-28, 1.743e-29, 2.224e-31, 4.283e-33, 1e-33,
            1e-33, 1e-33
        ])
        #  CLONO2
        #   0 -120   Mark Allen/FASCODE
        g61 = np.asarray([
            4.737e-06, 4.162e-06, 3.587e-06, 2.891e-06, 2.195e-06, 1.717e-06,
            1.238e-06, 9.775e-07, 7.17e-07, 6.231e-07, 5.292e-07, 5.313e-07,
            5.334e-07, 1.451e-06, 2.368e-06, 1.037e-05, 1.837e-05, 5.571e-05,
            9.304e-05, 0.0001748, 0.0002566, 0.0003681, 0.0004796, 0.000591,
            0.0007024, 0.0007724, 0.0008587, 0.0007428, 0.0004585, 0.0002005,
            5.867e-05, 8.818e-06, 1.319e-06, 1.61e-07, 1.889e-08, 1.855e-09,
            7.032e-11, 2.87e-12, 2.174e-13, 3.025e-14, 3.257e-15, 2.634e-17,
            3.313e-20, 2.134e-23, 1.366e-25, 4.128e-28, 3.433e-30, 1.0 - 30,
                                                                   1.0 - 30, 1.0 - 30
        ])
        #  N2O5
        #   0 -120   Mark Allen/FASCODE
        g62 = np.asarray([
            1.312e-10, 4.065e-10, 6.818e-10, 5.329e-08, 1.059e-07, 1.177e-06,
            2.248e-06, 2.435e-06, 2.622e-06, 2.526e-06, 2.43e-06, 2.714e-06,
            2.998e-06, 7.354e-06, 1.171e-05, 3.638e-05, 6.105e-05, 0.0001157,
            0.0001703, 0.0002471, 0.0003239, 0.0004204, 0.0005168, 0.0006318,
            0.0007468, 0.0008576, 0.0009888, 0.0007845, 0.000414, 0.0001556,
            4.229e-05, 7.489e-06, 1.426e-06, 2.195e-07, 3.706e-08, 6.586e-09,
            4.858e-10, 7.919e-12, 1.913e-13, 2.626e-15, 3.692e-17, 5.125e-19,
            2.169e-21, 6.096e-25, 6.336e-28, 9.855e-32, 1e-32, 1e-32, 1e-32,
            1e-32
        ])
        #  HNO4
        #   0 -120   Mark Allen/FASCODE
        g63 = np.asarray([
            8.851e-07, 2.031e-06, 3.177e-06, 7.444e-06, 1.171e-05, 1.962e-05,
            2.752e-05, 3.284e-05, 3.816e-05, 3.576e-05, 3.336e-05, 2.928e-05,
            2.519e-05, 2.814e-05, 3.109e-05, 4.406e-05, 5.703e-05, 8.127e-05,
            0.0001055, 0.0001344, 0.0001632, 0.0001946, 0.000226, 0.0002541,
            0.0002822, 0.000301, 0.0003016, 0.0002175, 0.0001151, 4.626e-05,
            1.448e-05, 3.333e-06, 8.857e-07, 2.244e-07, 5.992e-08, 1.669e-08,
            2.49e-09, 3.659e-10, 7.913e-11, 3.168e-11, 7.075e-12, 2.676e-13,
            3.296e-15, 1.497e-18, 2.227e-21, 1.918e-24, 2.507e-26, 3.283e-28,
            1.605e-29, 2.026e-30
        ])

        # gasids = np.arange([[(29, 31)).T], [((51, 63)).T]])
        # g29 = g29.T.reshape(50, 1, order='F')
        # g30 = g30.T.reshape(50, 1, order='F')
        # g31 = g31.T.reshape(50, 1, order='F')
        # g51 = g51.T.reshape(50, 1, order='F')
        # g52 = g52.T.reshape(50, 1, order='F')
        # g53 = g53.T.reshape(50, 1, order='F')
        # g54 = g54.T.reshape(50, 1, order='F')
        # g55 = g55.T.reshape(50, 1, order='F')
        # g56 = g56.T.reshape(50, 1, order='F')
        # g57 = g57.T.reshape(50, 1, order='F')
        # g58 = g58.T.reshape(50, 1, order='F')
        # g59 = g59.T.reshape(50, 1, order='F')
        # g60 = g60.T.reshape(50, 1, order='F')
        # g61 = g61.T.reshape(50, 1, order='F')
        # g62 = g62.T.reshape(50, 1, order='F')
        # g63 = g63.T.reshape(50, 1, order='F')
        md = np.column_stack([
            g29, g30, g31, g51, g52, g53, g54, g55, g56, g57, g58, g59, g60,
            g61, g62, g63
        ])

        return md
